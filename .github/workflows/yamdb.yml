name: api_yamdb workflow

on: push

env:
  WEB_IMAGE: $(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web_2
  NGINX_IMAGE: $(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx_2

jobs:
#   tests:
#     runs-on: ubuntu-latest
#
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"
#
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 pytest
#           cd app
#           pip install -r requirements.txt
#
#       - name: Lint with flake8
#         run: flake8 . --exclude migration,tests --ignore=E501,F401,F841,E128
#
#       - name: Test with pytest
#         env:
#           SECRET_KEY: ${{ secrets.SECRET_KEY }}
#           DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
#           SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
#           SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
#           SQL_USER: ${{ secrets.SQL_USER }}
#           SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
#           SQL_HOST: ${{ secrets.SQL_HOST }}
#           SQL_PORT: ${{ secrets.SQL_PORT }}
#           DATABASE: ${{ secrets.DATABASE }}
#           DEBUG: ${{ secrets.DEBUG }}
#         run: |
#           cd app
#           export DJANGO_SETTINGS_MODULE=api_yamdb.settings
#           pytest

   build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
#    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE=postgres >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build docker    
        run: |
            sudo docker-compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

      
          
      

        

      # - name: Push to Docker Hub
      #   uses: docker/build-push-action@v4
      #   with:
      #     file: app/Dockerfile_prod
      #     push: true
      #     tags: marik177/api_yamdb-app:latest
      # - name: Push Nginx to Docker Hub
      #   uses: docker/build-push-action@v4
      #   with:
      #     file: nginx/Dockerfile
      #     push: true
      #     tags: marik177/api_yamdb-nginx:latest

  # deploy:
  #  runs-on: ubuntu-latest
  #  needs: build_and_push_to_docker_hub
  #  steps:
  #  - name: executing remote ssh commands to deploy
  #    uses: appleboy/ssh-action@v0.1.8
  #    with:
  #      host: ${{ secrets.HOST }}
  #      username: ${{ secrets.USER }}
  #      key: ${{ secrets.SSH_KEY }}
  #      script: |
  #       cd my_api
  #       sudo docker-compose -f docker-compose.prod.yandex.yml down
  #       sudo docker rmi $(sudo docker images -a -q)
  #       sudo docker-compose -f docker-compose.prod.yandex.yml up -d
